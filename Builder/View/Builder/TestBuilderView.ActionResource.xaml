<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:actionType="clr-namespace:MQChatter.Model.Action"
                    xmlns:behavior="clr-namespace:MQChatter.View.Behavior"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Style/ButtonDictionary.xaml" />
        <ResourceDictionary Source="../Style/SharedSettingsDictionary.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- SendAction template -->
    <DataTemplate DataType="{x:Type actionType:SendAction}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="8*" />
                <ColumnDefinition Width="3*" />
                <ColumnDefinition Width="3*" />
            </Grid.ColumnDefinitions>
            <TextBox Grid.Column="0" Text="{Binding FilePath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     IsReadOnly="True" Margin="{StaticResource RuleSubElementMargin}" />
            <Button Grid.Column="1"  Style="{StaticResource FileButtonStyle}"
                    Margin="{StaticResource RuleSubElementMargin}">
                <i:Interaction.Behaviors>
                    <behavior:FileDialogBehavior SetterName="FilePath" />
                </i:Interaction.Behaviors>
            </Button>

            <materialDesign:PopupBox PlacementMode="BottomAndAlignCentres" StaysOpen="True" Grid.Column="2" Margin="{StaticResource RuleSubElementMargin}" DataContext="{Binding Path=MQSettings}" HorizontalAlignment="Stretch" Background="Gray">
                <materialDesign:PopupBox.ToggleContent>
                    <materialDesign:PackIcon Style="{StaticResource MQSettingsToggleButtonStyle}" />
                </materialDesign:PopupBox.ToggleContent>
                <StackPanel Width="150" HorizontalAlignment="Center">
                    <TextBlock Text="MQ properties" Foreground="Black" HorizontalAlignment="Center" FontWeight="Bold" Margin="10" />
                    <TextBox Text="{Binding QueueManagerName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" materialDesign:HintAssist.Hint="queue manager" Margin="2" />
                    <TextBox Text="{Binding QueueName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" materialDesign:HintAssist.Hint="queue" Margin="2" />
                    <TextBox Text="{Binding ChannelName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" materialDesign:HintAssist.Hint="channel" Margin="2" />
                    <TextBox Text="{Binding Hostname, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" materialDesign:HintAssist.Hint="hostname" Margin="2" />
                    <TextBox Text="{Binding Port, TargetNullValue='', Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" materialDesign:HintAssist.Hint="port" Margin="2" />
                </StackPanel>
            </materialDesign:PopupBox>
        </Grid>
    </DataTemplate>

    <!-- AddAction template -->
    <DataTemplate DataType="{x:Type actionType:AddAction}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
            </Grid.ColumnDefinitions>
            <TextBox Grid.Column="0" Text="{Binding Path, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     materialDesign:HintAssist.Hint="xpath" />
            <TextBox Grid.Column="1" Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,1,0" />
        </Grid>
    </DataTemplate>

    <!-- CopyAction template -->
    <DataTemplate DataType="{x:Type actionType:CopyAction}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
            </Grid.ColumnDefinitions>
            <TextBox Grid.Column="0" Text="{Binding PathFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     materialDesign:HintAssist.Hint="xpath from" />
            <TextBox Grid.Column="1" Text="{Binding PathTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     materialDesign:HintAssist.Hint="xpath to" />
        </Grid>
    </DataTemplate>

    <!-- AddAction template -->
    <DataTemplate DataType="{x:Type actionType:NoAction}">
    </DataTemplate>


    <!-- Action template -->
    <DataTemplate x:Key="ActionTemplate">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="1*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="7*" />
                <ColumnDefinition Width="1*" />
            </Grid.ColumnDefinitions>
            
            <ItemsControl ItemsSource="{Binding ActionGroup.Actions, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Row="0" Grid.ColumnSpan="2">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7*" />
                                <ColumnDefinition Width="10*" />
                                <ColumnDefinition Width="2*" />
                            </Grid.ColumnDefinitions>

                            <ComboBox x:Name="SelectedActionComboBox" ItemsSource="{Binding AvailableActions, Mode=OneTime}" DisplayMemberPath="DisplayName"
                            SelectedItem="{Binding Selected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="0" Margin="{StaticResource RuleElementMargin}" />

                            <ContentControl Grid.Column="1" DataContext="{Binding Path=Selected}" Content="{Binding}" Margin="{StaticResource RuleElementMargin}" />

                            <Button Grid.Column="2" Command="{Binding Path=DataContext.ActionGroup.RemoveActionCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}}"
                            CommandParameter="{Binding}" Style="{StaticResource RemoveButtonStyle}" Margin="{StaticResource RuleLastElementMargin}" />
                        </Grid>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <Button Grid.Row="1" Grid.ColumnSpan="2" Command="{Binding ActionGroup.AddActionCommand, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource AddRuleButtonStyle}" />

            <!--<Controls:Badged Grid.Row="1" Grid.Column="1" Badge="{Binding Path=ActionGroup.NumberOfErrors}" BadgePlacementMode="BottomRight" HorizontalAlignment="Stretch" ToolTip="{Binding Path=ActionGroup.ErrorMessage}" Margin="4,0,0,0" >
                <Controls:Badged.Style>
                    <Style TargetType="Controls:Badged">
                        <Setter Property="BadgeBackground" Value="IndianRed" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=ActionGroup.NumberOfErrors}" Value="0">
                                <Setter Property="BadgeBackground" Value="DodgerBlue"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Controls:Badged.Style>
                <Button  Style="{StaticResource ErrorButtonStyle}" IsEnabled="False"/>
            </Controls:Badged>-->
        </Grid>
    </DataTemplate>
</ResourceDictionary>